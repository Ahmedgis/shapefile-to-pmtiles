# =====================================================
# Trae.ai App Builder Prompt
# Project: Shapefile to PMTiles Converter & Web Previewer
# Author: [User/Engineer Name]
# Purpose: Convert Esri Shapefiles (single or batch) to PMTiles
# =====================================================

## 🔷 Project Overview
Create a complete Python + Web App that can convert Esri Shapefiles (.shp) into PMTiles format, supporting both single and batch conversion.  
The app should handle reprojection, UTF-8 encoded Arabic attribute data, logging, and automated web map preview using MapLibre GL JS.  
It must be optimized for large shapefiles and easy to use via both a GUI and CLI.

---

## 🔧 Functional Requirements

### 1. Input Handling
- User can select:
  - A **single shapefile (.shp)**, or  
  - A **directory** containing multiple shapefiles.  
- Automatically detect shapefiles within directories.
- Read metadata from each shapefile:
  - File name
  - Layer name
  - CRS (projection)
- Support Arabic UTF-8 encoded attribute data.

---

### 2. CRS & Reprojection
- Detect CRS automatically using `ogrinfo` or GDAL.
- If not EPSG:3857 (Web Mercator), reproject using **pyproj** or **ogr2ogr**.
- Preserve precision and handle large coordinate extents efficiently.
- Cache CRS lookups for performance in batch mode.

---

### 3. Zoom Level Calculation
- Calculate approximate **min and max zoom levels** based on spatial extent and feature density.
- Select the **best max zoom** for high detail without performance issues.
- Allow optional manual override via:
  - `config.yaml` file
  - CLI arguments or GUI fields

---

### 4. Conversion Pipeline
**Toolchain:**
- Use **GDAL (ogr2ogr)** → convert Shapefile → GeoJSON
- Use **Tippecanoe** → convert GeoJSON → PMTiles

**Conversion Steps:**
1. `.shp` → `.geojson` (via GDAL)
2. `.geojson` → `.pmtiles` (via Tippecanoe)

**Rules:**
- Output filename = input filename
- Layer name = input layer name
- Maintain attribute names and UTF-8 encoding
- Optimize Tippecanoe parameters for large data:
  - `--read-parallel`
  - `--drop-densest-as-needed`
  - `--maximum-zoom=<calculated>`
  - `--simplification=<auto>`
- Remove intermediate files after conversion (temporary directory cleanup)

---

### 5. Logging System
- Create a `/logs` directory.
- Generate **incremental log files by date**, e.g.: logs/convert_2025-10-29.log
- Log levels:
- INFO → normal progress
- WARNING → projection or encoding issues
- ERROR → conversion or file failures
- Log details:
- File paths processed
- CRS detected
- Reprojection actions
- Conversion duration
- Tippecanoe summary output
- Append mode (do not overwrite existing logs).

---

### 6. Web Map Preview (MapLibre)
- After conversion, launch a local web previewer using **Flask** or a lightweight HTTP server.
- Use **MapLibre GL JS** to display PMTiles.
- Auto-zoom to the PMTiles file’s extent.
- Support toggling between multiple PMTiles if multiple files were converted.
- Basic UI controls:
- Layer toggle panel
- Zoom controls
- Map style switch (streets/satellite)
- Auto-open preview in default browser after conversion.

---

### 7. User Interface & CLI
- Two operation modes:
1. **CLI Mode**:
   ```
   python shapefile_to_pmtile.py --input "C:\GISData\Shapefiles" --output "C:\GISData\PMTiles"
   ```
2. **GUI Mode (Trae.ai Frontend)**:
   - File/Directory picker
   - Output directory selector
   - Zoom level override (optional)
   - “Start Conversion” button
   - Real-time log view area with colored INFO/WARN/ERROR lines
   - “Preview Map” button (enabled when conversion completes)
- Display progress bar with `tqdm` for both modes.

---

### 8. Configuration File (config.yaml)
Support a `config.yaml` file for default settings:
```yaml
default_input: "./input"
default_output: "./output"
default_min_zoom: 4
default_max_zoom: 14
reproject_to_web_mercator: true
tippecanoe_args:
- --read-parallel
- --drop-densest-as-needed

9. Performance Enhancements:
- Use concurrent.futures.ThreadPoolExecutor or ProcessPoolExecutor for parallel batch conversions
- Stream large shapefiles instead of loading them fully into memory.
- Cache CRS info and temporary file paths.
- Support graceful cancellation of batch operations.
- Auto-cleanup of intermediate files upon success or failure.

10. Output Management:
- Store outputs in /output directory by default.
- Maintain directory structure if batch converting.
- Generate summary report after batch run:
- Number of shapefiles processed
- Successes / Failures
- Total execution time
- Log file path

11. Technical Stack:
Language: Python 3.x
Libraries & Tools:
gdal / ogr2ogr
tippecanoe
pyproj
flask
maplibre-gl-js
tqdm
argparse
logging
yaml
concurrent.futures
os, subprocess, datetime, json

12. App Architecture:
Backend (Python):
- Handles file scanning, CRS detection, reprojection, conversion, logging, and report generation.
- Launches web server for MapLibre preview.

Frontend (Web - MapLibre UI):
- Displays PMTiles on an interactive map.
- Provides user-friendly interface for viewing and managing conversions.
- Built automatically by Trae.ai App Builder using simple HTML/CSS/JS + MapLibre GL JS.

13. User Flow
- User launches the app.
- Selects file or directory.
- Adjusts optional settings (zoom, output path, etc.).
- Clicks “Start Conversion”.
- Conversion logs appear live.
- On completion:
    - PMTiles saved in /output
    - Logs saved in /logs
    - Map preview auto-opens in browser showing results.

14. Bonus Features:
- Retry failed conversions via “Retry” button.
- Summary dashboard (count, duration, errors).
- Optional dark/light mode for UI.
- Validation step before conversion (check GDAL/Tippecanoe availability).
- Allow drag-and-drop of shapefiles into GUI window.

15. Deliverables:
you should generate:
- shapefile_to_pmtile.py — main conversion script
- config.yaml — configuration file
- requirements.txt — dependencies
- templates/index.html — MapLibre web viewer template
- static/ — supporting JS/CSS assets
- logs/ and output/ folders created automatically

16. Acceptance Criteria:
- Handles Arabic UTF-8 shapefiles without corruption.
- Converts large datasets efficiently (tested >500MB).
- Logs are incremental and clear.
- Web map preview loads all PMTiles layers with correct extents.
- Works offline without cloud dependencies.